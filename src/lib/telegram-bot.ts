import { Application } from '../types/application-types';

/**
 * –ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–æ–∫ –≤ Telegram –±–æ—Ç
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ Next.js –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
 */
export class TelegramNotificationService {
  private botToken: string;
  private groupChatId: string;

  constructor(botToken: string, groupChatId: string) {
    if (!botToken) {
      throw new Error('Telegram bot token is required');
    }
    if (!groupChatId) {
      throw new Error('Group chat ID is required');
    }
    this.botToken = botToken;
    this.groupChatId = groupChatId;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É –≤ Telegram –≥—Ä—É–ø–ø—É
   */
  async sendApplication(application: Application): Promise<void> {
    try {
      const message = this.formatApplicationMessage(application);
      
      const response = await fetch(`https://api.telegram.org/bot${this.botToken}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: this.groupChatId,
          text: message,
          parse_mode: 'HTML'
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(`Telegram API error: ${errorData.description || 'Unknown error'}`);
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –≤ Telegram:', error);
      throw error;
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ
   */
  private formatApplicationMessage(application: Application): string {
    const sourceLabels: Record<Application['source'], string> = {
      'website_form': '—Å —Å–∞–π—Ç–∞',
      'contact_form': '–∏–∑ —Ñ–æ—Ä–º—ã –∫–æ–Ω—Ç–∞–∫—Ç–∞',
      'bottom_form': '–∏–∑ –Ω–∏–∂–Ω–µ–π —Ñ–æ—Ä–º—ã',
      'services_form': '–∏–∑ —Ä–∞–∑–¥–µ–ª–∞ —É—Å–ª—É–≥',
      'modal_form': '–∏–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞',
      'whatsapp': '–∏–∑ WhatsApp',
      'telegram_direct': '–∏–∑ Telegram'
    };
    
    const sourceLabel = sourceLabels[application.source] || '—Å —Å–∞–π—Ç–∞';
    
    let message: string;
    
    if (application.source === 'telegram_direct') {
      message = `üí¨ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ${sourceLabel}:\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${application.userNameTelegram}${application.userUsernameTelegram ? ` (@${application.userUsernameTelegram})` : ''}\nüìù –í–æ–ø—Ä–æ—Å: ${application.userMessage}`;
    } else {
      message = `üìã –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ${sourceLabel}:\n\nüë§ –ò–º—è: ${application.name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${application.phone}`;
    }
    
    if (application.sphere) {
      message += `\nüè¢ –°—Ñ–µ—Ä–∞: ${application.sphere}`;
    }
    
    const moscowTime = new Date().toLocaleString('ru-RU', { 
      timeZone: 'Europe/Moscow',
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });
    
    message += `\n‚è∞ –í—Ä–µ–º—è: ${moscowTime} (–ú–°–ö)\n\n–°—Ç–∞—Ç—É—Å: ‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏`;
    
    return message;
  }
}